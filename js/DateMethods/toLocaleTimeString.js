/**
 * - toLocaleTimeString() -  возвращает строку с языко-зависимым представлением части со временем в этой дате.
 *
 * - Параметры - .toLocaleTimeString(locales?, options?)
 *
 * - locales - Необязательный параметр. Строка с языковой меткой, либо массив таких строк.
 *   Интересующую локаль всегда можно найти в интернете - https://github.com/mozilla/language-mapping-list/blob/master/language-mapping-list.js
 *
 * - options - Необязательный параметр. Объект с некоторыми или всеми из следующих свойств:
 *   - timeZone - Используемый часовой пояс. Единственным значением, которые реализации обязаны распознавать, является "UTC"; значением по умолчанию является часовой пояс по умолчанию среды выполнения.
 *   - hour12 - Определяет, использовать ли 12-ти часовой формат времени (в противовес 24-х часовому). Возможными значениями являются true и false; значение по умолчанию зависит от локали.
 *  - weekday - Представление дней недели. Возможными значениями являются "narrow", "short" и "long".
 *  - era - Представление эр. Возможными значениями являются "narrow", "short" и "long".
 *  - year - Представление лет. Возможными значениями являются "numeric" и "2-digit".
 *  - month - Представление месяцев. Возможными значениями являются "numeric", "2-digit", "narrow", "short" и "long".
 *  - day - Представление дней. Возможными значениями являются "numeric" и "2-digit".
 *  - hour - Представление часов. Возможными значениями являются "numeric" и "2-digit".
 *  - minute - Представление минут. Возможными значениями являются "numeric" и "2-digit".
 *  - second - Представление минут. Возможными значениями являются "numeric" и "2-digit".
 *  - timeZoneName - Представление названий часовых поясов. Возможными значениями являются "short" и "long".
 *
 * Пример:
 */

const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

// Форматирование ниже предполагает, что местный часовой пояс равен
// America/Los_Angeles для локали США

// В америкаском английском используется 12-часовой формат времени
console.log(date.toLocaleTimeString("en-US"));
// → "7:00:00 PM"

// В британском английском используется 24-часовой формат времени
console.log(date.toLocaleTimeString("en-GB"));
// → "03:00:00"

// В корейском используется 12-часовой формат времени
console.log(date.toLocaleTimeString("ko-KR"));
// → "오후 12:00:00"

// В большинстве арабоговорящих стран используют настоящие арабские цифры
console.log(date.toLocaleTimeString("ar-EG"));
// → "٧:٠٠:٠٠ م"

// Если запрашиваемый язык может не поддерживаться, например
// балийский, откатываемся на запасной язык, в данном случае индонезийский
console.log(date.toLocaleTimeString(["ban", "id"]));
// → "11.00.00"

/////////////////////////////////////////////////////////////////////////////

const date2 = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));

// Приложение может захотеть использовать UTC и показать это
const options = { timeZone: "UTC", timeZoneName: "short" };
console.log(date2.toLocaleTimeString("en-US", options));
// → "3:00:00 AM GMT"

// Иногда даже в США нужен 24-х часовой формат времени
console.log(date2.toLocaleTimeString("en-US", { hour12: false }));
// → "19:00:00"

console.log(
  date2.toLocaleTimeString("uk-UA", {
    weekday: "short",
    era: "short",
    timeZoneName: "long",
  })
);
